Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
Return the sum of the three integers.
You may assume that each input would have exactly one solution.

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).

class Solution {
    public int threeSumClosest(int[] nums, int target) {

        // Step 1: Sort the array to use the two-pointer technique
        Arrays.sort(nums);
        int n = nums.length;

        // Step 2: Initialize the closestSum with the sum of the first three elements
        // This will be our baseline to compare with other sums
        int closestSum = nums[0] + nums[1] + nums[2];

        // Step 3: Iterate through the array, fixing one element at a time
        for(int i = 0; i < n - 2; i++){
            int low = i + 1;      // Pointer to the next element after the fixed element
            int high = n - 1;     // Pointer to the last element in the array

            // Step 4: Use two-pointer technique to find the closest sum
            while(low < high){
                // Calculate the sum of the triplet
                int sum = nums[i] + nums[low] + nums[high];
                
                // Step 5: Check if this sum is closer to the target than the previous closest sum
                if(Math.abs(target - sum) < Math.abs(target - closestSum)){
                    closestSum = sum;  // Update closestSum if current sum is closer to the target
                }

                // Step 6: Move the pointers based on the comparison with the target
                if(sum < target){
                    low++;   // Move the low pointer to increase the sum
                } else if(sum > target){
                    high--;  // Move the high pointer to decrease the sum
                } else {
                    return target;  // If exact match is found, return the target
                }
            }
        }

        // Step 7: Return the closest sum found
        return closestSum;
    }
}
