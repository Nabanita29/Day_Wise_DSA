Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]




class Solution {
    public int[] productExceptSelf(int[] nums) {

        int n = nums.length;

         // Initialize the prefix array to store products of elements to the right
        int[] prefix = new int[n];
        // Last element in prefix array should be 1 (no elements to the right)
        prefix[n - 1] = 1;
        for(int i = n - 2; i >= 0; i--){
            // Each element is the product of the next element's prefix and the next element in nums
            prefix[i] = prefix[i + 1] * nums[i + 1];
        }
        // Initialize the suffix array to store products of elements to the left
        int[] suffix = new int[n];
        // First element in suffix array should be 1 (no elements to the left)
        suffix[0] = 1;
        for(int i = 1; i < n ; i++){
            // Each element is the product of the previous element's suffix and the previous element in nums
            suffix[i] = suffix[i - 1] * nums[i - 1];
        }

        int[] result = new int[n];
        for(int i = 0; i < n; i++){
            result[i] = prefix[i] * suffix[i];
        }

        return result;

    }
}
